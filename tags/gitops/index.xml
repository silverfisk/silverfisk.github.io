<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitOps on linux-konsult.com</title><link>https://linux-konsult.com/tags/gitops/</link><description>Recent content in GitOps on linux-konsult.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 27 Oct 2022 14:30:00 +0200</lastBuildDate><atom:link href="https://linux-konsult.com/tags/gitops/index.xml" rel="self" type="application/rss+xml"/><item><title>Let karpenters just-in-time scheduler manage disk pressure</title><link>https://linux-konsult.com/posts/k8s/karpenter/</link><pubDate>Thu, 27 Oct 2022 14:30:00 +0200</pubDate><guid>https://linux-konsult.com/posts/k8s/karpenter/</guid><description>&lt;h2 id="overview">
 Overview
 &lt;a class="heading-link" href="#overview">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;hr>
&lt;p>Capacity planning in Kubernetes can be challenging.
Karpenter is useful for automatically rightscaling and rightsizing Kubernetes nodes in an EKS cluster, but it usually only considers CPU and memory usage. We experienced difficulties troubleshooting this issue because the node storage was not full at the time we checked it. The disk usage would spike to almost capacity (98-99%) during the execution of GitLab CI jobs, then decrease after the job was completed. This made it difficult to identify the cause of the issue.&lt;/p></description></item><item><title>Install ArgoCD</title><link>https://linux-konsult.com/posts/k8s/argocd/</link><pubDate>Sun, 31 Jul 2022 10:00:00 +0200</pubDate><guid>https://linux-konsult.com/posts/k8s/argocd/</guid><description>&lt;h2 id="quick-install">
 Quick install
 &lt;a class="heading-link" href="#quick-install">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>mkdir -p ~/git/github.com/argoproj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ~/git/github.com/argoproj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create namespace argocd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/argoproj/argo-cd.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl apply --namespace argocd -f ~/git/github.com/argoproj/argo-cd/manifests/install.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="access-argocd">
 Access ArgoCD
 &lt;a class="heading-link" href="#access-argocd">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>To access ArgoCD you port forward as below. The installation process automatically creates an &lt;code>admin&lt;/code> user. You&amp;rsquo;ll see the generated password below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#a5d6ff">&amp;#34;argocd password: &lt;/span>&lt;span style="color:#ff7b72">$(&lt;/span>kubectl -n argocd get secret argocd-initial-admin-secret -ojson | jq -r .data.password| base64 -d&lt;span style="color:#ff7b72">)&lt;/span>&lt;span style="color:#a5d6ff">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl port-forward svc/argocd-server -n argocd 8080:443
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>